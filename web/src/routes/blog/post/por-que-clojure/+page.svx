---
date: 2020-10-12T23:35:45-03:00
banner: https://res.cloudinary.com/matiasfha/image/upload/v1602556838/Clojure_logo.svg_idu5pq.png
keywords:
- Clojure
- Listp

title: "¬øPor qu√© Clojure?"
description: Clojure es un lenguaje variante de Lips, flexible, funcional, din√°mico
  y entretenido.
bannerCredit: ''
tag: Clojure

---
Desde hace ya un tiempo que comence mi viaje de aprendizaje con Clojure, incialmente m√°s por curiosidad que nada, me gusta aprender nuevos lenguajes y obtener de cada uno de ellos algo que mejore mi trabajo diario.
Inicie con Clojure con el proyecto [ClojureFam](https://github.com/athensresearch/ClojureFam) y en este momento puedo decir: Me encanta Clojure.

Pero, comencemos por el principio:

# ¬øQu√© es Clojure?

Clojure es un lenguaje de uso general, din√°mico, es un dialecto de Lisp y comparte su **filosof√≠a /c√≥digo como datos** / (m√°s de esto m√°s adelante).

Fue creado el 2007 por Rich Hickey, acutalmente mantenido principalmente por Cognitect con la ayuda de 126 colaboradores

Es actualmente utilizado por [varias compa√±ias](https://clojure.org/community/success_stories) como Amazon y Wallmart.

# ¬øPero qu√© hace de Clojure un lenguaje √∫nico e interesante?

Primero, si bien Clojure naci√≥ el 2007, es en realidad una ‚Äúre-versi√≥n‚Äù (dialecto) de un lenguaje que se reh√∫sa a morir y que es probablemente el lenguaje m√°s antiguo a√∫n en uso Lisp.
Lisp, apareci√≥ publicamente por primera vez en 1958, si!!, hace 62 a√±os subsistiendo a los cambios de paradigmas y nuevos requerimientos del mundo del desarrollo de software.

Clojure, es una ‚Äúevoluci√≥n‚Äù de Lisp, matiene lo mejor que √©ste provee y mejorar algunas cosas creando un lenguaje simple (que no f√°cil) con una sintaxis robusta y m√≠nima.

> ‚ÄúLisp isn‚Äôt a language, it‚Äôs a building material.‚Äù ‚Äî Alan Kay

## JVM

Clojure se ejecuta en la JVM (Java virtual Machine), una gran pieza de software optimizada hasta m√°s no poder (tambi√©n se ejecuta o ‚Äútranspila‚Äù  a Javascript para funcionar sobre el navegador) y adem√°s utiliza o ‚Äúaprovecha‚Äù el ecosistema de Java, con todas sus librer√≠as inclu√≠das, es decir, a√±os de experiencia y desarrollo al alcance de este nuevo lenguaje.

Actualmente el stack de Java (nacido en los 90s) es sin lugar a duda el stack m√°s popular en la industria, con la inmensa cantidad de c√≥digo Java disponible en producci√≥n es casi imposible para un nuevo lenguaje querer superar a Java o al menos querer ser notorio sin la capacidad de inter-operar con Java (o Javascript en el caso de ClojureScript).

Clojure te permite utilizar c√≥digo Java por ejemplo:

```clojure
    (import 'java.util.Date 'java.text.SimpleDateFormat)
```

o crear una instancia de una clase java

```clojure
    (import '(java.text SimpleDateFormat))
    (def sdf (new SimpleDateFormat "yyyy-MM-dd"))
```

En definitiva, Clojure utiliza todo el poder de la JVM y de lo que esta puede ofrecer.

> Si he llegado hasta aqu√≠ es por que me aup√© en hombros de gigantes - Atribu√≠do a Isaac Newton

Es decir, con Clojure obtienes el poder de la ya muy probada y aceptada JVM y adem√°s su portabilidad inherente a casi cualquier hardware y OS existente.

## Din√°mico, Inmutable y Funcional

Clojure, es tambi√©n un lenguaje din√°mico pero con estructuras de datos estrictamente inmutables, esto proporciona una gran facibilidad de uso para la manipulaci√≥n de datos, adem√°s esta inmutabilidad provee facilidades tambi√©n para el desarrollo de aplicaciones multi-hilos evitando ‚Äúrace conditions‚Äù y otros problemas presentes en lenguajes mutables como Java.

Es de tipado din√°mico, esto quiz√° pueda ser algo que te aleje del lenguaje, pero la filosof√≠a del lenguaje y el ciclo de desarrollo te aseguran que los cl√°sico errores de tipo de datos (`undefined is not a function`) no ocurrir√°n. Clojure es conocido por ser un lenguaje _REPL Driven Development_, es decir, utiliza su ultra poderosa REPL (Read Eval Print Loop) para ir testeando ‚Äúin live‚Äù el c√≥digo que vas escribiendo.

Otra caracter√≠stica ‚Äúcool‚Äù, heredada desde Lisp es la **homoiconocidad** el propio programa que est√°s escribiendo puede ser manipulado como datos utilizando Clojure dado que un programa Clojure es representado como estructuras de datos Clojure.

Es un lenguaje funcional, no es purista como Haskell. Datos inmutables y funciones como ciudadanos importantes de este lenguaje permiten que puedas aplicar el paradigma en todo su esplendor. Ser funcional es algo bueno (has visto la tendencia en casi todos los lenguajes de programaci√≥n? Hasta Java soporta funciones an√≥nimas/lambdas ahora!! üò≥)

> ‚ÄúChoose immutability and see where it takes you‚Äù ‚Äî Rich Hickey, Clojure creator

## Sintaxis econ√≥mica

Pero una de las cosas que m√°s llama la atenci√≥n inicialmente es su sintaxis, bastante extra√±a para la mayor√≠a que hemos heredado el experimento que fue la sintaxis ofrecida por C.
Clojure cas√≠ no tiene sintaxis o gram√°tica, un ejemplo puede explicar mucho m√°s

```clojure
    (println (take 10 (map (fn [x] (* x x)) (range))))
```

Esta _‚Äúcriptica‚Äù_ pieza de c√≥digo imprime en pantalla es bastante extra√±a la primera vez que la vez, tantos parentesis!!
Esta es, en mi opini√≥n, m√°s del 85% de toda la sintaxis de Clojure, solo quedan por aprender algunas palbras claves como `def` y `defn`.

Que hace este c√≥digo? o, como lo leo?
En clojure, todo est√° definido como una lista, definida por `()` parentesis, esta sintaxis define tanto una lista como una ‚Äúforma‚Äù o expresi√≥n. En este caso lo que tenemos es:

* Se abre un parentesis iniciando una expresi√≥n (abreviado comunmente como sexp - S-expresion)
* println es simplemente una llamada a la funci√≥n `System.out.println` proviniente de Java, para imprimir algo en pantalla, a su derecha est√° el argumento de `println`, lo que queremos imprimir.
* `()` una nueva lista es abierta
* `take` es una funci√≥n que espera dos argumentos, un entero y una secuencia. El entero `10` indica el n√∫mero de elementos que queremos ‚Äútomar‚Äù de la secuencia
* `()` una nueva lista es abierta
* `map` aparece. Es una funci√≥n que tambi√©n toma dos argumentos, una funci√≥n para aplicar sobre cada item de la lista que recibe como segundo argumento.
* `(fn [x] (* x x))` una nueva lista y una funci√≥n an√≥nima es definida. Esta es la forma de definir una funci√≥n sin nombre, una lambda, que recibe `[x]` un argumento llamado `x` y que retorna el resultado de aplicar la funci√≥n `*` sobre los argumentos `x` y `x`
* El segundo argumento de `map` es una lista, en este caso es la llamada a la funci√≥n `range`
* `range` simplemente retorna una lista con _‚Äútodos‚Äù_ los enteros positivos. Range retorna una secuencia tipo `lazy`, es decir, solo se generan los enteros solicitados, en este caso `10`

  Otra forma de escribir esto ser√≠a

```clojure
      (defn square [x] (* x x))
      (println (take 10 (map square (range))))
```

  `defn` es la forma que te permite definir una funci√≥n ü§∑‚Äç‚ôÇÔ∏è recibe como argumentos el nombre de la funci√≥n y la definici√≥n de esta (dentro de una lista `()`). Aqui los `[]` ‚Äúbrackets‚Äù que se usan para definir un vector, se utilizan para definir el grupo de argumentos de la funci√≥n.

  ¬øC√≥mo ser√≠a esto mismo en Javascript?

```js

      const range = Array.from({length: 10}, (_, i) => i + 1)
      console.log(range.map(item => item*item))
```

  Dado que javascript tiene ciertas capacidades de escribir c√≥digo en forma funcional este trozo de codigo no es demasiado ‚Äúverbose‚Äù, pero quiz√° algo m√°s dificil de entender.

  La primera linea utiliza [`Array.from`](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/from) que recibe un objeto de configuraci√≥n con `length: 10`, largo 10 y una funci√≥n tipo `map`, que toma el indice del elemento y le suma 1, para poder crear una arreglo que comienza desde 1.

  Quiz√° una forma mas sencilla ser√≠a utilizar una librer√≠a como lodash o [underscore](http://underscorejs.org/#range) o escribir c√≥digo imperativo cmo

```js

       // Otras opciones declarativas
      // Array(10).fill().map((_, i) => i+1);
      // [ ...Array(10).keys() ].map( i => i+1);
      const range = []
      for(let i = 1; let i <= 10; i++){
        range.push(i)
      }
      const square = (x) => x*x
      console.log(range.map(item => square(item)))
```

  Lo que es notoriamente m√°s explicito/imperativo y al mismo tiempo m√°s verbose.

## Tooling

Las herramientas para desarrollar Clojure son tan buenas como cualquiera.

Editar c√≥digo Clojure (u otros Lisp) no es exactamente como editar c√≥digo en otros lenguajes, ahora estas lidiando con la edici√≥n de [expresiones-s](https://en.wikipedia.org/wiki/S-expression)

Por lo general el editor consideradode-facto es Emacs en conjunto con [Cider](https://cider.mx) que es una especie de ‚Äúplugin‚Äù para emacs que permite tener un ambiente de desarrollo interactivo utilizar REPL.
Clojure ofrece (antes mencionado) un medio de desarrollo conocido como REPL Driven Development, un ciclo de desarrollo interactivo e incremental, donde te encuentras constantemente re-evaluando las definiciones de tus funciones y agregando nuevas definiciones mientras tu app se ejecuta. No es necesario estar iniciando o deteniendo tu aplicaci√≥n escrita en Clojure, simplemente te conectas a la interfaz de REPL.

Pero Emacs no es el √∫nico IDE o editor que ofrece estas herramientas, tambi√©n es muy popular utilizar

* IntelliJ con [Cursive](https://cursive-ide.com)
* VIM con [paredit](http://www.vim.org/scripts/script.php?script_id=3998) o [sexp](https://github.com/guns/vim-sexp) y [fireplace](https://github.com/tpope/vim-fireplace) o [conjure](https://github.com/Olical/conjure)
* VSCode con [Clojure](https://marketplace.visualstudio.com/items?itemName=avli.clojure) o [Calva](https://marketplace.visualstudio.com/items?itemName=betterthantomorrow.calva)

Tambi√©n vale la pena mencionar que Clojure tiene varias herramientas que te ayudan a manejar tus dependencias y crear tus proyectos, el m√°s utilizado es [leiningen](https://leiningen.org)

## Comunidad

La comunidad de Clojure, si bien menor en comparaci√≥n con Java, Python o Javascript (quiz√° la m√°s grande de todas (?)) es una comunidad muy activa.

* [Clojurians Slack](https://clojurians.net)
* Reddit [/r/clojure](https://reddit.com/r/clojure)
* Youtube [ClojureTV](https://www.youtube.com/user/ClojureTV)
* [ClojureFam](https://github.com/athensresearch/ClojureFam) El programa de apredizaje de Clojure que estoy siguiendo.

  Adem√°s hay varias meetups y conferencias sobre el desarrollo de Clojure y ClojureScript como:
* 
* [ClojuTRE](http://clojutre.org/2020/)
* [ClojureNorth](http://clojurenorth.com/)
* [Clojuredays](https://clojure.org/events/2020/dutchclojureday)
* [ClojureD](https://clojure.org/events/2020/clojured)
* [ClojureBridge](https://www.bridgetroll.org/events/500)

# Conclusi√≥n

Clojure es un lenguaje entretenido, con una sintaxis que inicialmente parece compleja pero que en realidad es de las m√°s sencillas que me he encontrado, es vers√°til y puedes transformarte en un full stack developer escribiendo Clojure y Clojurescript.

Te invito a saltar a este mundo y comenzar a aprender un nuevo lenguaje, quiz√° no para convertirte en un _clojurist_ pero siempre, aprender un nuevo lenguaje, un nuevo paradigma y t√©cnicas te ayudaran a ser mejor en lo que haces d√≠a a d√≠a.

> Tambi√©n te puede interesar el art√≠culo [Overview de algunos modernos lenguajes de programaci√≥n](/blog/post/overview-de-algunos-modernos-lenguajes-de-programacion)
